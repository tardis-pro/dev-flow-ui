import { NextRequest, NextResponse } from "next/server";
import { withOctokit } from "@/lib/github";
import { getEnv } from "@/lib/env";

const env = getEnv();

type GeminiReviewPayload = {
  owner?: string;
  repo?: string;
  issueNumber?: number;
  message?: string;
};

const DEFAULT_MESSAGE =
  "Re-run Gemini review please. âœ… This comment was generated by DevFlow.";

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ number: string }> },
) {
  const { number } = await params;
  const pullNumber = Number.parseInt(number, 10);
  if (!Number.isInteger(pullNumber)) {
    return NextResponse.json({ error: "Invalid pull request number." }, { status: 400 });
  }

  let payload: GeminiReviewPayload = {};
  try {
    if (request.headers.get("content-length") !== "0") {
      payload = (await request.json()) as GeminiReviewPayload;
    }
  } catch {
    return NextResponse.json({ error: "Invalid payload." }, { status: 400 });
  }

  const owner = payload.owner ?? env.GITHUB_OWNER;
  const repo = payload.repo ?? env.GITHUB_REPO;
  if (!owner || !repo) {
    return NextResponse.json(
      { error: "owner and repo must be specified." },
      { status: 400 },
    );
  }

  try {
    await withOctokit({ owner, repo, prefer: "installation" }, async (octokit) => {
      const message = (payload.message ?? DEFAULT_MESSAGE).trim();
      await octokit.issues.createComment({
        owner,
        repo,
        issue_number: pullNumber,
        body: message,
      });
    });

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      {
        error: "Failed to request Gemini review.",
        details: error instanceof Error ? error.message : "Unknown error.",
      },
      { status: 500 },
    );
  }
}
